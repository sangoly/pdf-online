(join-path-parts "pdf_file" "c++")
exit
(use 'pdf-online.util)
(join-path-parts "pdf_files" "c++")
(join-path-parts "pdf_files")
(join-path-parts)
exit
(use )
(use 'pdf-online.util)
(create-new-user-folder "sangoly")
(create-new-user-folder "dkfj")
exit
(use 'pdf-online.routes.auth)
exit
(use 'pdf-online.routes.auth)
exit
(use 'pdf-online.routes.auth)
exit
(use 'pdf-online.routes.auth)
exit
(use 'pdf-online.routes.auth)
(hand-registration "headimage" "sangoly" "123456" "123456")
(pst)
(valid-register "sangoly" "123456" "123456")
(valid-register? "sangoly" "123456" "123456")
(valid-register? :"sangoly" :"123456" :"123456")
exit
(def ff {:headimage "headimage" :username "username" :pass "123456" :pass1 "123456"})
(use 'pdf-online.routes.auth)
(def ff {:headimage "headimage" :username "username" :pass "123456" :pass1 "123456"})
(hand-registration {:headimage "headimage" :username "sangoly" :pass "123456" :pass1 "123456"})
(hand-registration ["headimage" "sangoly" "123456" "123456"])
(hand-registration "headimage" "sangoly" "123456" "123456")
exit
(use 'pdf-online.models.db)
(create-user {:id "sangoly" :pass "123456" :superuser "0" :statewords "hello" :image "head"})
(create-user {:id "sangoly" :pass "123456" :superuser false :statewords "hello" :image "head"})
(delete "sangoly")
(delete :sangoly)
(delete-user "sangoly")
(use 'pdf-online.models.db)
(delete-user :sangoly)
(delete-user "sangoly")
(use 'pdf-online.util)
(create-new-user-folder "sangoly")
(use 'pdf-online.models.schema)
exit
(use 'pdf-online.models.schema)
(drop-table "users")
(create-the-user-table)
(create-user-table)
(ns 'pdf-online.util)
(ns pdf-online.util)
(create-new-user-folder "ss")
(::create-new-user-folder "ss")
(ns user)
dir
(use 'pdf-online.util)
(create-new-user-folder "ss")
exit
(use 'pdf-online.util)
(create-new-user-folder "ss")
(user 'pdf-online.util)
(use 'pdf-online.util)
(test-create-folder "sangoly")
exit
(use 'pdf-online.util)
(test-create-folder ")
(test-create-folder "1")
(type (range 10))
(use 'pdf-online.routes.auth)
(delete-account "sangoly")
(pst)
exit
(use 'pdf-online.routes.auth)
(delete-acount "sangoly")
(delete-account "sangoly")
(pst)
(delete-account (str "sangoly" "\" "image"))
)
(delete-account (str "sangoly" "\" "image"))
(delete-account "sangoly\image")
(delete-account "sangoly\\image")
(delete-account "sangoly\\image\\00.PNG")
exit
(use 'pdf-online.util)
exit
(use 'pdf-online.util)
(delete-directory "sangoly")
exit
(use 'pdf-online.util)
(delete-directory "sangoly")
y
(delete-directory "sangoly")
(reload)
(realod )
(realod 'pdf-online.util)
(reload 'pdf-online.util)
(:reload 'pdf-online.util)
(delete "sangoly")
(use 'pdf-online.util)
(delete "sangoly")
exit
(use 'pdf-online.util)
(delete-directory "sangoly")
(delete-directory "sangoly" "1987")
exit
(use 'pdf-online.util)
(delete-directory "sangoly")
(delete-directory "sangoly" "544")
(defn ff [& parts] (clojure.string/join "." (cons "userfiles" parts)))
(ff "11" "22")
(defn sd [& parts] (ff parts))
(sd "11" "22")
(defn sd [& parts] (ff @parts))
(sd "11" "22")
(defn sd [& parts] (ff ~@parts))
(sd "11" "22")
(defmacro sd [& parts] `(~ff ~@parts))
(sd "11" "22")
(defn sd [& parts] `(~ff ~@parts))
(sd "11" "22")
(defn sd [& parts] ff `(~@parts))
(sd "11" "22")
(defn sd [& parts] (ff `(~@parts)))
(sd "11" "22")
(defmaro ex [body] `(~@body))
(defmacro ex [body] `(~@body))
(ex [1 2 3])
(ex ["1" "2" "3"])
(ex ("1" "2" "3"))
(defn sd [& parts] (ff (ex parts)))
(ex "1")
(ex ["1"])
(defmacro ex [body] `(~))
(defmacro ex [body] `(~body))
(ex 1)
exit
(defmacro ex [body] `(~@["1" "2"]))
(ex 1)
(defmacro ex [body] `(~println ~@["1" "2"]))
(ex 1)
(defmacro ex [body] `(~do ~@["1" "2"]))
(defmacro ex [body] `(~doseq ~@["1" "2"]))
(defmacro ex [body] '(~@["1" "2"]))
(ex 1)
(defmacro ex [body] '(["1" "2"]))
(ex 1)
(defmacro ex [body] 'body)
(ex 1)
(defmacro ex [body] `[~@body])
(ex 1)
(ex 1 2)
(ex [1 2)
(ex [1 2])
(defmacro ex [body] `~@body)
(defmacro ex [body] ~@body)
(ex [1 2])
(take [1 2])
(take 2 [1 2])
(defn sd [& parts] (ff `(~@)))
(defn sd [& parts] (ff `(~@parts)))
(defn ff [& parts] (clojure.string/join "," (cons "test" parts)))
(defn sd [& parts] (ff `(~@parts)))
(sd "11" "23")
(defn sd [& parts] (ff `~@parts)))
(defn sd [& parts] (ff ~@parts)))
(defn sd [& parts] (ff ~@parts))
(sd "11" "22")
(defn sd [& parts] (ff 'parts))
(sd "11" "22")
(defn sd [& parts] (ff '@parts))
(sd "11" "22")
(defn sd [& parts] (ff @parts))
(sd "11" "22")
(defmarco ex-pt [body] ~(ff ~@body))
(defmacro ex-pt [body] ~(ff ~@body))
(ex-pt "11" "22")
(ex-pt ["11" "22"])
(defmacro ex-pt [body] `(~ff ~@body))
(ex-pt ["11" "22"])
exit
(use 'pdf-online.util)
(pst)
exit
(def test "111")
~test
(~test)
~[test]
(~[test])
`~test
exit
(use 'pdf-online.routes.auth)
(delete-account "sangoly")
exit
(use 'pdf-online.routes.auth)
exit
(use 'pdf-online.routes.auth)
(delete-account "sangoly")
(delete-account "111111111")
exit
(use 'pdf-online.routes.auth)
(delete-account "sangoly1")
(use 'pdf-online.routes.auth)
(delete-account "sangoly")
(use 'pdf-online.routes.auth)
(valid-extend? "heelo.pt" "")
exit
(use 'pdf-online.routes.auth)
(valid-extends "com.pp" "")
(valid-extends? "com.pp" "")
(valid-extend? "com.pp" "")
(valid-extend? "com.png" "")
(contains? ["jpeg" "png"] "png")
(contains? (seq ["jpeg" "png"]) "png")
(contains? (seq "jpeg" "png") "png")
(contains? (seq ("jpeg" "png")) "png")
(contains? (seq "png") "png")
exit
(use 'pdf-online.routes.auth)
(valid-extends "om.png" "png")
(valid-extend? "om.png" "png")
exit
(use 'pdf-online.routes.auth)
(valid-extend? "com.png" "")
(:reload)
(:reload 'pdf-online.routes.auth)
(valid-extend? "com.png" "")
exit
(use 'pdf-online.routes.auth)
(valid-extend? "com.PNG" "")
(valid-extend? "com.png" "")
exit
(use 'pdf-online.routes.auth)
(valid-extend? "com.png" "")
(contains '(1 2 3) 1)
(contains? '(1 2 3) 1)
(contains? [1 2 3] 1)
(contains? [ 2 3] 1)
(contains? ["1" "2" "3"] "1")
(equals? 1 1)
(equal? 1 1)
(= 1 1)
(= "1" )
(= "1" "1")
(= "png" "png")
(= "png" "PNG")
(= "png" (.toLowerCase "PNG"))
exit
(use 'pdf-online.routes.auth)
(valid-extend? "com.png" "")
(valid-extend? "com.PNH" "")
(valid-extend? "com.PNG" "")
(* 2 1024 1024)
(* 11.2 1024)
(use 'pdf-online.routes.auth)
(delete-account "sangoly1")
(delete-account "sangoly2")
(use 'pdf-online.models.shcema)
(use 'pdf-online.models.schema)
(create-pdfs-table)
dir
(drop-table pdfs)
(drop-table "pdfs")
exit
(use 'pdf-online.models.schema)
(drop-table "pdfs")
                                                                                         exit
(use 'pdf-online.models.schema)
(drop-table "pdfs")
exit)
(use 'pdf-online.models.schema)
(create-pdfs-table)
exit
(use 'pdf-online.models.schema)
(create-pdfs-table)
(drop-table :pdfs)
(create-pdfs-table)
(def tt {:name "name" :age "age" :sex "sex"})
@tt
~tt
@ttt
@tt
(def ff "test")
@ff
'ff
'@ff
(deref ff)
(deref tt)
exit
(use 'pdf-online.models.schema)
(drop-table :users)
(drop-table :user)
(drop-table :users)
exit
(use 'pdf-online.routes.auth)
(delete-account "sangoly")
(use 'pdf-online.models.schema)
(create-user-table)
(drop-table :user)
(use 'pdf-online.modes.db)
(use 'pdf-online.models.schema)
(create-user-table)
(create-pdfs-table)
(use 'pdf-online.models.schema)
(drop-table :users)
(drop-table :pdfs)
(drop-table :uers)
(drop-table :users)
(create-user-table)
(create-pdfs-table)
(use 'pdf-online.models.db)
(create-user {:id "sangoly" :pass "111" :statewords "test"})
(create-user {:id "sangoly" :pass "111" :statewords "test" :superuser "false"})
(use 'pdf-online.models.schema)
(drop-table :pdfs)
(drop-table :users)
(create-user-table)
(create-pdfs-table)
(use 'pdf-online.models.db)
(delete-user "sangoly")
exit
(def mm {:name "name" :age "age" :sex "sex"})
(paris mm)
(find-doc item)
(find-doc it)
(find-doc map)
(find-doc do)
(finddoc do)
(doc do)
(filter #(println %) mm)
(filter #(println (first %)) mm)
(filter #(println (first (str %))) mm)
(vals mm)
`(vals mm)
@(vals mm)
exit
(use 'pdf-online.models.db)
(get-pdfs "test")
exit\
exit
(use 'pdf-online.models.db)
(get-pdfs "tt")
(get-pdfs [1 1])
(get-pdfs {:name 1})
exit
(use 'pdf-online.models.db)
(get-pdfs {:name "name" :age "age"})
(map #(str %1 "=" %2) (:age :name) (age name))
(map #(str % "=") (:age :name) (age name))
(map #(str % "=") (age name) (age name))
(map #(str % "=") ("age" "name") ("age" "name"))
(map #(reduce "" str(%)) ("age" "name") ("age" "name"))
(reduce {:age "age" :name "name"})
(reduce "" {:age "age" :name "name"})
(reduce-kv #(str %) "" {:age "age" :name "name"})
(reduce-kv #(str %) "" ("age" "name"))
(reduce-kv #(str %) "" ["age" "name"])
(reduce-kv #(str %1 " " %2 "=" %3) "" {:age "age" :name "name"})
(reduce-kv #(str %1 " " %2 "=" %3) "" {:age "age" :name "name" :sex "sex"})
exit
(use 'pdf-online.models.db)
(get-pdfs {:name "name" :age "age" :pdf "pdfs"})
(pairs {:name "name" :age "age"})
(every #(println %) {:name "name" :time "time"})
(apply #(println %) {:name "name" :time "time"})
(apply str (1 2))
(apply str 1 2)
(apply str "1" "2)
(apply str "1" "2")
(apply str ["1" "2"])
(apply str {:t "1" :w "2"})
(apply str {:name "name" :age "age"})
(apply #(str %1 "=" %2) {:name "name" :age "age"})
(apply #(str (first %) "=" (second %)) {:name "name" :age "age"})
(apply #(str (first %1) "=" (second %1)) {:name "name" :age "age"})
(apply #(str (first %) "=" (second %)) {:name "name" :age "age"})
:name
(str :name)
(val :name)
(subs (str :first) 1)
(str "first")
exit
(use 'pdf-online.models.db)
(get-rows :keytable {:test "test"})
(app str {:name "name" :test "test"})
(apply str {:name "name" :test "test"})
(apply #(str %) {:name "name" :test "test"})
(map #(println %) {:first "first" :second "second"})
(map #(println (first %)) {:first "first" :second "second"})
exit
(use 'pdf-online.models.db)
(get-rows :users {:id "sangoly" :name "test"})
exit
(use 'pdf-online.models.db)
(get-rows :users {:id "sangoly" :name "haah"})
exit
(use 'pdf-online.models.db)
(get-rows :users {:id "sangoly"})
(apply str "test")
exit
(use 'pdf-online.models.db)
(get-rows :users {:id "sangoly"})
exit
(use 'pdf-online.models.db)
(get-rows :users {:name "sangoly"})
exit
(use 'pdf-online.models.db)
(get-rows :users {:name "sangoly"})
exit
(use 'pdf-online.models.db)
exit
(use 'pdf-online.models.db)
exit
(use 'pdf-online.models.db)
exit
(use 'pdf-online.models.db)
exit
(use 'pdf-online.models.db)
exit
(use 'pdf-online.models.db)
(expand-cond-args :users {:name "sangoly" :test "test"})
exit
(use 'pdf-online.models.db)
(expand-cond-args :users {:name "sangoly" :test "test"})
exit
(use 'pdf-online.models.db)
exit
(use 'pdf-online.models.db)
(expand-cond-args :users {:name "sangoly" :age "test"})
(origin-body :users {:name "sangoly" :age "test"})
(defmacro ff [tablename params] `((~origin-body ~tablename ~params)))
(defn origin-body [tablename params] (str "select * from " (util/key-to-str tablename) " where " )
       (join " and " (map #(str (util/key-to-str %) "=?") (keys params))))
exit
(use 'pdf-online.models.db)
(expand-cond-args :users {:name "name" :test "test"})
exit
(use 'pdf-online.models.db)
(expand-cond-args :users {:name "test"})
(pst)
(macroexpand expand-cond-args)
(macroexpand expand-cond-args :users {})
:
'
(macroexpand expand-cond-args :users {:name "test"})
(macroexpand (expand-cond-args :users {:name "test"}))
exit
(defn origin-body [tablename params] (str "select * from 111 where" (clojure.string/joing " and " (map #(str %) "=?") (keys params))))
(defn origin-body [tablename params] (str "select * from 111 where" (clojure.string/join " and " (map #(str %) "=?") (keys params))))
(origin-body :user {:name "111" :pa "222"})
(defn origin-body [tablename params] (str "select * from 111 where" (clojure.string/joing " and " (map #(str % "=?")) (keys params))))
(defn origin-body [tablename params] (str "select * from 111 where" (clojure.string/join " and " (map #(str % "=?")) (keys params))))
(origin-body :users {:name "name" :body "test"})
(defn origin-body [tablename params] (str "select * from 111 where" (clojure.string/join " and " (map #(str % "=?") (keys params)))))
(origin-body :users {:name "name" :body "test"})
(defmarco expand-cond-args [tablename params]) `((~origin-body tablename params) ~@(~vals params))
(defmacro expand-cond-args [tablename params]) `((~origin-body tablename params) ~@(~vals params))
(defmacro expand-cond-args [tablename params] `((~origin-body tablename params) ~@(~vals params))
'
;
(defmacro expand-cond-args [tablename params] `((~origin-body tablename params) ~@(~vals params))
)
(macroexpand expand-cond-args)
(macroexpand-1 expand-cond-args)
(macroexpand-1 `(expand-cond-args :users {:name "name" :body "test"}))
(defmacro expand-cond-args [tablename params] `((~origin-body tablename ~params) ~@(~vals params))
~
(defmacro expand-cond-args [tablename params] `((~origin-body ~tablename ~params) ~@(~vals params))
)
(macroexpand expand-cond-args)
(macroexpand (expand-cond-args :users {:name "name" :body "body"}))
(expand-cond-args :users {:name "name" :body "body"})
(defmacro expand-cond-args [tablename params] `((~origin-body ~tablename ~params) ~@(~vals params)))
(defn origin-body [tablename params] (str "select * from 111 where" (clojure.string/join " and " (map #(str % "=?") (keys params)))))
(defn origin-body [tablename params] (str "select * from 111 where" (clojure.string/join " and " (map '#(str % "=?") (keys params)))))
(expand-cond-args :users {:name "name" :body "body"})
(defn origin-body [tablename params] (str "select * from 111 where" (clojure.string/join " and " '(map #(str % "=?") (keys params)))))
(defmacro expand-cond-args [tablename params] `((~origin-body ~tablename ~params) ~@(~vals params)))
(expand-cond-args :users {:name "name" :body "body"})
(defmacro expand-cond-args [tablename params] `((~origin-body ~tablename ~params) ~@(vals params)))
(expand-cond-args :users {:name "name" :body "body"})
(pst)
(defmacro expand-cond-args [tablename params] `(~(~origin-body ~tablename ~params) ~@(vals params)))
(expand-cond-args :users {:name "name" :body "body"})
(str (range 10))
(doall (str (range 10))
)
(doall (str (range 10)))
exit
(use 'pdf-online.models.db)
exit
(use 'pdf-online.models.db)
(get-select-sql :users {:name "name"} {:test "test"})
(get-select-sql :users {:name "name" :test "test"})
exit
(use 'pdf-online.routes.auth)
(delete-account "sangoly")
(delete-account "sangoly1")
exit
